library(shiny)
library(ggplot2)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
newdata = data.frame(waiting=WaitTime)
newdata = data.frame(waiting=80)
bmodel1 <- lm(eruptions ~ waiting, data=faithful)
PredErupt1=predict(bmodel1, newdata)
pointForplot1=data.frame(waiting=newdata,eruptions=PredErupt1)
View(pointForplot1)
View(pointForplot1)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runExample("04_mpg")
runExample("05_sliders")
shiny::runApp()
shiny::runApp()
shiny::runApp()
bmodel2 <- lm(eruptions~(waiting<65)*waiting + (waiting>=65)*waiting, data=faithful)
coefficients(bmodel2)
mod2points=data.frame(waiting=faithful$waiting,eruptions=predict(model2, faithful$waiting))
mod2points=data.frame(waiting=faithful$waiting,eruptions=predict(bmodel2, faithful$waiting))
mod2points=data.frame(waiting=faithful$waiting)
xx <- 40:100
yy = predict(bmodel2,xx)
library(data.table)
mod2points[ , estimates := predict(bmodel2, data.frame(xx))]
mod2points[ , estimates : predict(bmodel2, data.frame(xx))]
mod2points[ , estimates :== predict(bmodel2, data.frame(xx))]
mod2points[ , estimates := predict(bmodel2, data.frame(xx))]
View(mod2points)
View(mod2points)
as.data.table(mod2points)
mod2pointsdt=as.data.table(mod2points)
mod2pointsdt[ , estimates := predict(bmodel2, data.frame(xx))]
mod2pointsdt[ , estimates := predict(bmodel2, data.frame(waiting=xx))]
View(mod2pointsdt)
View(mod2pointsdt)
View(mod2pointsdt)
x<-seq(min(40), max(100),1)
ndf <- data.frame(x=x)
ndf$y <- predict(bmodel2, ndf)
ndf <- data.frame(waiting=x)
ndf$y <- predict(bmodel2, ndf)
qplot(waiting, eruptions, geom = 'point', data = faithful)
+geom_line(ndf, mapping=(aes(x=waiting, y=y)))
+geom_line(ndf, mapping=(aes(x=ndf$waiting, ndf$y=y)))
+geom_line(ndf, mapping=(aes(x=ndf$waiting, y=ndf$y)))
ndf$eruptions = predict(bmodel2, ndf)
+geom_line(ndf, mapping=(aes(x=waiting, y=eruptions)))
View(ndf)
qplot(waiting, eruptions, geom = 'point', data = faithful)+geom_line(ndf, mapping=(aes(x=waiting, y=eruptions)))
shiny::runApp()
qplot(waiting, eruptions, geom = 'point', data = faithful)+geom_line(ndf, mapping=(aes(x=waiting, y=eruptions)), colour=blue)
qplot(waiting, eruptions, geom = 'point', data = faithful)+geom_line(ndf, mapping=(aes(x=waiting, y=eruptions)), colour="blue")
qplot(waiting, eruptions, geom = 'point', data = faithful)+geom_line(ndf, mapping=(aes(x=waiting, y=eruptions)), colour="blue",size = 5)
qplot(waiting, eruptions, geom = 'point', data = faithful)+geom_line(ndf, mapping=(aes(x=waiting, y=eruptions)), colour="blue",size = 3)
qplot(waiting, eruptions, geom = 'point', data = faithful)+geom_line(ndf, mapping=(aes(x=waiting, y=eruptions)), colour="blue",size = 2)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shinyapps::deployApp('C:\Users\Jean-Michel\Desktop\Data Science\Course 9 Project 3\Course-9-Project-3\App for Project 3')
library(shiny)
shinyapps::deployApp('C:\Users\Jean-Michel\Desktop\Data Science\Course 9 Project 3\Course-9-Project-3\App for Project 3')
shinyapps::deployApp('C:/Users/Jean-Michel/Desktop/Data Science/Course 9 Project 3/Course-9-Project-3/App for Project 3')
install.packages("shinyapps")
library(shinyapps)
install.packages(c("rmarkdown", "rsconnect"))
shiny::runApp()
